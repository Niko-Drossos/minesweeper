import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Minefield from '../components/Minefield'
import BombCountInput from '../components/BombCountInput'

/* --------------------------- Generate minefield --------------------------- */

function generate2DArray(rows, cols) {
  return Array.from({ length: rows }, () => Array(cols).fill(0));
}

/* ---------------------- Add bombs to minefield array ---------------------- */

function addBombs(minefield, bombCount) {
  const flatArray = minefield.flat();

  for (let i = 0; i < bombCount; i++) {
    let placement;
    do {
      placement = Math.floor(Math.random() * flatArray.length);
    } while (flatArray[placement] === 1);

    flatArray[placement] = 1;
  }

  // Convert the flat array back to a 2D array
  return Array.from({ length: minefield.length }, (_, i) =>
    flatArray.slice(i * minefield[0].length, (i + 1) * minefield[0].length)
  );
}


export default function Home() {
  const [hitMine, setHitMine] = useState(false)
  const [minefield, setMinefield] = useState(addBombs(generate2DArray(10, 10), 13))
  const [gameEnd, setGameEnd] = useState(false)
  const [resetGame, setResetGame] = useState(false)
  const [bombCount, setBombCount] = useState(10)
  const [endState, setEndState] = useState(null)

  useEffect(() => {
    if (endState) {
      console.log(endState)
    }
  }, [endState])

  useEffect(() => {
    if (hitMine) {
      setGameEnd(true)
      setEndState("You hit a mine and lost")
    }
  }, [hitMine])
  
  const handleBombCountChange = (newBombCount) => {
    setBombCount(newBombCount);
    setResetGame(true);
  };

  function checkSquares(cords) {
    const { rowIndex, colIndex } = cords
  
    if (minefield[rowIndex][colIndex] === 1) {
      setHitMine(true)
      return "ðŸ’£"
    }
  
    function checkValid(row, col) {
      if (minefield[row] && minefield[row][col] !== undefined) {
        return minefield[row][col];
      } else {
        return 0;
      }
    }
  
    let neighbors = [
      checkValid(rowIndex, colIndex + 1),        // Right
      checkValid(rowIndex, colIndex - 1),        // Left
      checkValid(rowIndex + 1, colIndex),        // Bottom
      checkValid(rowIndex + 1, colIndex + 1),    // Bottom-right
      checkValid(rowIndex + 1, colIndex - 1),    // Bottom-left
      checkValid(rowIndex - 1, colIndex),        // Top
      checkValid(rowIndex - 1, colIndex - 1),    // Top-left
      checkValid(rowIndex - 1, colIndex + 1),    // Top-right
    ];
  
    neighbors = neighbors.filter(tile => tile !== undefined)
  
    const mineCount = neighbors.reduce((acc, neighbor) => acc + neighbor, 0);
    return mineCount
  }

  /* ----------------------------- Finish the game ---------------------------- */

  function endGame() {
    setGameEnd(true)
    //! ADD WINNING & LOSING GAME LOGIC
  }

  function resetButton() {
    setGameEnd(false)
    setResetGame(true)
    setMinefield(addBombs(generate2DArray(10, 10), bombCount))
    
    setTimeout(() => {
      setResetGame(false);
    }, 1000); // Adjust the delay as needed
  }
  

  
  return (
    <>
      <Head>
        <title>Minesweeper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Minesweeper!</h1>
        <BombCountInput onBombCountChange={handleBombCountChange} />
        <div className={styles.container}>
          <Minefield {...{ minefield, checkSquares, gameEnd, resetGame, bombCount }} />
        </div>
        <button onClick={endGame}>End game</button>
        <button onClick={resetButton}>Reset game</button>
      </main>
    </>
  )
}
